version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: iot3-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: iot3_vending_machine
      MYSQL_USER: iot3user
      MYSQL_PASSWORD: iot3password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - iot3-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Back-end API Service
  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: iot3-backend
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      # Database Configuration
      DB_DRIVER: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: iot3_vending_machine
      DB_USER: iot3user
      DB_PASSWORD: iot3password
      
      # Cardano Configuration
      APP_WALLET: "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon beef crack"
      BLOCKFROST_API_KEY: "preprodd5DPyqaYr9wHq61rSloWWgT4dM4wM23A"
      
      # Server Configuration
      SERVER_PORT: 3004
      FRONT_END_HOST: "http://localhost:3005"
      NODE_ENV: production
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - iot3-network
    volumes:
      - ./back-end/data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Front-end Web Application
  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    container_name: iot3-frontend
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      NEXT_PUBLIC_API_ENDPOINT: "http://localhost:3004/api"
      NEXT_PUBLIC_WEBSOCKET: "ws://localhost:3004"
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - iot3-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: iot3-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - iot3-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: iot3-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - iot3-network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  iot3-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
