generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  address      String         @unique @map("address") 
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Collection   Collection[]
  Media        Media[]
  Product      Product[]
  Subscription Subscription[]
  Payment      Payment[]
  Feedback     Feedback[]
  suppliers    Supplier[]

  @@map("user")
}

model WalletNonce {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  address   String   @unique @map("address") 
  nonce     String

  @@map("wallet_nonce")
}

model Collection {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  userId      String     @map("user_id")
  name        String     @map("name")
  thumbnail   String?    @map("thumbnail")
  description String?    @map("description")
  user        User       @relation(fields: [userId], references: [id])
  Metadata    Metadata[]

  @@map("collection")
}

model Metadata {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  collectionId String     @map("collection_id")
  assetName    String?    @map("asset_name") // Tên tài sản NFT
  content      String     @map("content") // JSON hoặc URL siêu dữ liệu
  nftReference String[]   @map("nft_reference") // Tham chiếu blockchain
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("metadata")
}

model Media {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  name      String
  type      String
  url       String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("media")
}

model Product {
  id                String              @id @default(cuid())
  userId            String              @map("user_id")
  policyId          String?             @map("policy_id")
  assetName         String?             @map("asset_name")
  name              String              @map("name")
  imageUrl          String?             @map("image_url")
  description       String?             @map("description")
  historyHash       String?             @map("history_hash")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  user              User                @relation(fields: [userId], references: [id])
  Document          Document[]
  ProductionProcess ProductionProcess[]
  WarehouseStorage  WarehouseStorage[]
  Feedback          Feedback[]
  Certification     Certification[]

  @@map("product")
}

model Supplier {
  id             String     @id @default(cuid())
  name           String
  location       String?
  gpsCoordinates String?    @map("gps_coordinates")
  contactInfo    String?    @map("contact_info")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  Material       Material[]
  userId         String
  user           User       @relation(fields: [userId], references: [id])

  @@map("supplier")
}

model Material {
  id          String    @id @default(cuid())
  supplierId  String    @map("supplier_id")
  name        String
  harvestDate DateTime? @map("harvest_date")
  quantity    Float     @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  supplier    Supplier  @relation(fields: [supplierId], references: [id])

  @@map("raw_material")
}


model Document {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  docType   String   @map("doc_type")
  url       String   @unique
  hash      String?  @map("hash") // Hash lưu trên blockchain
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])

  @@map("document")
}

model Service {
  id           String         @id @default(cuid())
  name         String
  description  String?        @map("description")
  price        Float
  duration     Int
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Subscription Subscription[]

  @@map("service_plan")
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  servicePlanId String    @map("service_plan_id")
  startDate     DateTime  @map("start_date")
  endDate       DateTime  @map("end_date")
  status        String    @default("active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  user          User      @relation(fields: [userId], references: [id])
  service       Service   @relation(fields: [servicePlanId], references: [id])
  Payment       Payment[]

  @@map("subscription")
}

model Payment {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  subscriptionId String       @map("subscription_id")
  amount         Float 
  currency       String       @default("ADA") 
  txHash         String       @unique @map("tx_hash") 
  paymentDate    DateTime     @map("payment_date")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  user           User         @relation(fields: [userId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("payment")
}

model Warehouse {
  id               String             @id @default(cuid())
  name             String
  location         String?
  capacity         Int                @default(0)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  WarehouseStorage WarehouseStorage[]

  @@map("warehouse")
}

model WarehouseStorage {
  id          String    @id @default(cuid())
  productId   String    @map("product_id")
  warehouseId String    @map("warehouse_id")
  entryTime   DateTime  @map("entry_time")
  exitTime    DateTime? @map("exit_time")
  conditions  String?   @map("conditions")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@map("warehouse_storage")
}

model ProductionProcess {
  id        String    @id @default(cuid())
  productId String    @map("product_id")
  startTime DateTime  @map("start_time")
  endTime   DateTime? @map("end_time")
  location  String?   @map("location")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])

  @@map("production_process")
}


model Certification {
  id         String    @id @default(cuid())
  productId  String    @map("product_id")
  certName   String    @map("cert_name")
  issueDate  DateTime  @map("issue_date")
  expiryDate DateTime? @map("expiry_date")
  certHash   String?   @map("cert_hash")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  product    Product   @relation(fields: [productId], references: [id])

  @@map("certification")
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  content   String   @map("content")
  rating    Int      @default(0) // Điểm đánh giá (0-5)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("feedback")
}
