version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: iot2-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - SERVER_PORT=3000
      - FRONT_END_HOST=http://localhost:3003
    env_file:
      - ./back-end/.env
    volumes:
      # Mount .env file if it exists
      - ./back-end/.env:/app/.env:ro
    networks:
      - iot2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Dashboard Service
  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    container_name: iot2-frontend
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_ENDPOINT=http://localhost:3000
      - NEXT_PUBLIC_WEBSOCKET=ws://localhost:3000
    env_file:
      - ./front-end/.env
    volumes:
      # Mount .env file if it exists
      - ./front-end/.env:/app/.env.local:ro
    networks:
      - iot2-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: iot2-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - iot2-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

networks:
  iot2-network:
    driver: bridge
    name: iot2-network

volumes:
  # Persistent volumes for development
  backend_node_modules:
    name: iot2-backend-node-modules
  frontend_node_modules:
    name: iot2-frontend-node-modules
